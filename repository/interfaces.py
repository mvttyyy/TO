from abc import ABC, abstractmethod
from model.book import Book
from model.user import User

class IBookRepository(ABC):
    @abstractmethod
    def save(self, book: Book): ...
    @abstractmethod
    def update(self, book: Book): ...
    @abstractmethod
    def find_by_title(self, title: str) -> Book: ...
    @abstractmethod
    def all(self) -> list[Book]: ...

class IUserRepository(ABC):
    @abstractmethod
    def save(self, user: User): ...
    @abstractmethod
    def find_by_name(self, name: str) -> User: ...
    @abstractmethod
    def add_borrow(self, user_name: str, title: str): ...
    @abstractmethod
    def remove_borrow(self, user_name: str, title: str): ...
    @abstractmethod
    def add_reserve(self, user_name: str, title: str): ...
    @abstractmethod
    def remove_reserve(self, user_name: str, title: str): ...